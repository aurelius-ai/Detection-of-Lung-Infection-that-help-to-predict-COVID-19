from tensorflow.python.keras import backend as K
from tensorflow.python.keras.models import Model
from tensorflow.python.keras.layers import Flatten, Dense, Dropout
from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
#from tensorflow.python.keras.applications.resnet50 import ResNet50 
from keras.applications.resnet50 import ResNet50
from keras.preprocessing import image
from tensorflow.python.keras.optimizers import Adam
from tensorflow.python.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
FREEZE_LAYERS = 2  # freeze the first this many layers for training
NUM_EPOCHS    = 30
WEIGHTS_FINAL = 'model-resnet50-final.h5'
''''''''
''''''''''''
'''''''''''''''
''''''''''''
''''''''''''
# show class indices
print('****************')
for cls, idx in train_batches.class_indices.items():
    print('Class #{} = {}'.format(idx, cls))
print('****************')
'''''''''''''''''
'''''''''''''''
''''''''''''''''
'''''''''''''''''''
''''''''''''''''''''
net = ResNet50(include_top=False, weights='imagenet', input_tensor=None,
               input_shape=(IMAGE_SIZE[0],IMAGE_SIZE[1],3))
               
               ''''''''''''''''
               '''''''''''''''''
               '''''''''''''''''''
               ''''''''''''''''''''
output_layer = Dense(NUM_CLASSES, activation='softmax', name='softmax')(x)
net_fi = Model(inputs=net.input, outputs=output_layer)  
net_fi.compile( optimizer='adam',loss='categorical_crossentropy', 
                  metrics=['accuracy'])
print(net_fi.summary())
'''''''''''''
''''''''''''''
''''''''''''
# save trained weights
net_fi.save(WEIGHTS_FINAL)
import matplotlib.pyplot as plt
# loss
plt.plot(fit_history.history['loss'], label='train loss')
plt.plot(fit_history.history['val_loss'], label='val loss')
plt.legend()
plt.show()

# accuracies
plt.plot(fit_history.history['accuracy'], label='train acc')
plt.plot(fit_history.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
